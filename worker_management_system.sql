1.Deop all tables
drop table WORKER;
drop table TITLE;
drop table INCREMENT;


2.Create the table WORKER 
CREATE TABLE WORKER (
    WORKER_ID INT PRIMARY KEY,
    TITLE_ID INT,
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    SALARY DECIMAL(10, 2),
    JOINING_DATE DATE,
    DEPARTMENT VARCHAR(50)
);
3.Create the table TITLE 
CREATE TABLE TITLE (
    TITLE_ID INT PRIMARY KEY,
    WORKER_TITLE VARCHAR(50),
    AFFECTED_FROM DATE
);

4.Create the table INCREMENT
CREATE TABLE INCREMENT (
    WORKER_ID INT,
    INCREMENT_STARTDATE DATE,
    AMOUNT DECIMAL(10, 2)
);

5.Insert TITLE
INSERT INTO TITLE (TITLE_ID, WORKER_TITLE, AFFECTED_FROM) VALUES
(1, 'Manager', '2016-02-01'),
(2, 'Asst. Manager', '2016-06-01'),
(3, 'Lead', '2016-06-01'),
(4, 'Executive', '2016-06-01');

6.select * from TITLE;

7.Insert WORKER INFO
INSERT INTO WORKER (WORKER_ID, TITLE_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) VALUES
(1, 1, 'NIHARIKA', 'ARORA', 20000, '2013-02-01', 'HR'),
(2, 6, 'AYUSHI', 'GURONDIA', 5000, '2015-02-01', 'ADMIN'),
(3, 3, 'PRIYANSHA', 'CHOUKSEY', 25000, '2014-05-01', 'HR'),
(4, 4, 'APARNA', 'DESHPANDE', 8000, '2016-12-01', 'ADMIN'),
(5, 1, 'SHAFALI', 'JAIN', 21000, '2015-08-01', 'ADMIN'),
(6, 5, 'SUCHITA', 'JOSHI', 20000, '2017-02-01', 'ACCOUNT'),
(7, 4, 'SHUBHI', 'MISHRA', 15000, '2018-03-01', 'ADMIN'),
(8, 3, 'DEVYANI', 'PATIDAR', 18000, '2014-05-01', 'ACCOUNT');

8.select * from WORKER;

9.Insert INCREMENT
INSERT INTO INCREMENT (WORKER_ID, INCREMENT_STARTDATE, AMOUNT) VALUES
(1, '2019-01-04', 5000),
(2, '2019-01-08', 3000),
(3, '2019-01-04', 4000),
(4, '2019-01-04', 4500),
(5, '2019-01-08', 3500);

10.select * from INCREMENT;

11.Using JOIN who does not have title
SELECT W.*
FROM WORKER W
LEFT JOIN TITLE T ON W.TITLE_ID = T.TITLE_ID
WHERE T.TITLE_ID IS NULL;


12.SELECT  W.WORKER_ID,
 W.FIRST_NAME,
 W.LAST_NAME, 
  CONCAT(LEFT(W.FIRST_NAME, 1), '.', LEFT(W.LAST_NAME, 1), '.') AS NAME, 
T.WORKER_TITLE, CONVERT(VARCHAR(8), W.JOINING_DATE, 112) AS JOINING_DATE_FORMATTED
FROM WORKER W JOIN TITLE T ON W.TITLE_ID = T.TITLE_ID;


13.Using join to add increment and amount worker table
SELECT 
    W.WORKER_ID,
    W.FIRST_NAME,
    W.LAST_NAME,
    T.WORKER_TITLE,
    I.INCREMENT_STARTDATE,
    I.AMOUNT,
    CASE 
        WHEN I.AMOUNT IS NOT NULL THEN 'Available'
        ELSE 'Not available'
    END AS INCREMENT_STATUS
FROM WORKER W
LEFT JOIN TITLE T ON W.TITLE_ID = T.TITLE_ID
LEFT JOIN INCREMENT I ON W.WORKER_ID = I.WORKER_ID;


14.select * from INCREMENT where AMOUNT > 4000
15.For MAX and MIN Salary

select * from worker where salary = (select MAX(salary) from WORKER);


16.Using RANK and Order by for making rank wise highest salary from worker table

SELECT WORKER_ID, LAST_NAME, salary, RANK()
 OVER(ORDER BY salary DESC) AS highest_salary
  FROM WORKER;

17.Using COALESCE for by default 0 where no increment amount
SELECT 
    W.WORKER_ID,
    W.FIRST_NAME,
    W.LAST_NAME,
    W.SALARY AS BASE_SALARY,
    COALESCE(I.AMOUNT, 0) AS INCREMENT_AMOUNT,
    (W.SALARY + COALESCE(I.AMOUNT, 0)) * 12 AS ANNUAL_SALARY_2019
FROM WORKER W
LEFT JOIN INCREMENT I 
    ON W.WORKER_ID = I.WORKER_ID 
    AND I.INCREMENT_STARTDATE BETWEEN '2019-01-01' AND '2019-12-31';


18.UPdate work salaary
CREATE PROCEDURE UpdateWorkerSalary
@WorkerID INT,
@NewSalary DECIMAL(10, 2)
AS 
BEGIN
UPDATE WORKER
    SET SALARY = @NewSalary
    WHERE WORKER_ID = @WorkerID;
END;


19.UpdateWorkerSalary @WorkerID = 3, @NewSalary = 1200.00;

20.select * from WORKER;



21. to make link and database 
SELECT 
    W.WORKER_ID,
    W.FIRST_NAME,
    W.LAST_NAME,
    T.WORKER_TITLE,
FROM [LNKSERVERXX].[APBIDB].[dbo].[WORKER] W
JOIN [LNKSERVERXX].[APBIDB].[dbo].[TITLE] T ON W.TITLE_ID = T.TITLE_ID;
